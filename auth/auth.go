package auth

import (
	"errors"
	"gost/auth/cookies"
	"gost/orm/models"
	"gost/util"
	"net/http"
	"strings"
)

// The keys that are used in the request header to authorize the user
const (
	AuthorizationHeader = "Authorization"
	AuthorizationScheme = "GHOST-TOKEN"
)

// Errors generated by the auth package
var (
	ErrInvalidScheme           = errors.New("The used authorization scheme is invalid or not supported")
	ErrInvalidToken            = errors.New("The given token is expired or invalid")
	ErrAnonymousUser           = errors.New("The user has no identity")
	ErrInexistentClientDetails = errors.New("Missing client details. Cannot create authorization for anonymous client")
)

// CreateToken generates a new gost-token, saves it in the database and returns it to the client
func CreateToken(user *models.ApplicationUser, client *cookies.Client) (string, error) {
	if client == nil {
		return ErrInexistentClientDetails.Error(), ErrInexistentClientDetails
	}

	session, err := cookies.NewSession(user, client)
	if err != nil {
		return err.Error(), err
	}

	return encodeToken(session)
}

// Authorize tries to authorize an existing gostToken
func Authorize(httpHeader http.Header) (string, error) {
	gostToken, err := extractGostToken(httpHeader)
	if err != nil {
		return err.Error(), err
	}

	encryptedToken, err := util.Decode([]byte(gostToken))
	if err != nil {
		return err.Error(), err
	}

	jsonToken, err := util.Decrypt(encryptedToken)
	if err != nil {
		return err.Error(), err
	}

	var cookie *cookies.Session
	err = util.DeserializeJSON(jsonToken, cookie)
	if err != nil {
		return err.Error(), err
	}

	if cookie.IsExpired() {
		return err.Error(), cookies.ErrTokenExpired
	}

	dbCookie, err := cookies.GetSession(cookie.Token)
	if err != nil || dbCookie == nil {
		return err.Error(), ErrInvalidToken
	}

	cookie.ResetToken()
	return encodeToken(cookie)
}

func extractGostToken(httpHeader http.Header) (string, error) {
	var gostToken string

	if gostToken = httpHeader.Get(AuthorizationHeader); len(gostToken) == 0 {
		return ErrAnonymousUser.Error(), ErrAnonymousUser
	}

	if !strings.Contains(gostToken, AuthorizationScheme) {
		return ErrInvalidScheme.Error(), ErrInvalidScheme
	}

	gostTokenValue := strings.TrimPrefix(gostToken, AuthorizationScheme)
	gostTokenValue = strings.TrimSpace(gostTokenValue)

	if len(gostTokenValue) == 0 {
		return ErrInvalidToken.Error(), ErrInvalidToken
	}

	return gostTokenValue, nil
}

func encodeToken(session *cookies.Session) (string, error) {
	err := session.Save()
	if err != nil {
		return err.Error(), err
	}

	jsonToken, err := util.SerializeJSON(session)
	if err != nil {
		return err.Error(), err
	}

	encryptedToken, err := util.Encrypt(jsonToken)
	if err != nil {
		return err.Error(), err
	}

	gostToken := util.Encode(encryptedToken)

	return string(gostToken), nil
}
