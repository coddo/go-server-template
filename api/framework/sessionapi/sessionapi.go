package sessionapi

import (
	"errors"
	"gost/api"
	"gost/auth"
	"gost/auth/cookies"
	"net/http"

	"gopkg.in/mgo.v2/bson"
)

// Errors generated by then Auth endpoint
var (
	ErrPasswordMatch = errors.New("The passwords do not match")
)

// getAllSessions retrieves all the sessions for a certain user account
func getAllSessions(userID bson.ObjectId) api.Response {
	userSessions, err := cookies.GetUserSessions(userID)
	if err != nil {
		return api.InternalServerError(err)
	}

	if len(userSessions) == 0 {
		return api.StatusResponse(http.StatusNoContent)
	}

	return api.JSONResponse(http.StatusOK, userSessions)
}

// createSession creates a new session for an existing user account
func createSession(model *LoginModel, clientDetails *cookies.Client) api.Response {
	if model.Password != model.PasswordConfirmation {
		return api.BadRequest(ErrPasswordMatch)
	}

	token, err := auth.GenerateUserAuth(model.AppUserID, model.Password, clientDetails)
	if err != nil {
		return api.BadRequest(err)
	}

	return api.PlainTextResponse(http.StatusOK, token)
}

// killSession deletes a session for an existing user account based on the session token
func killSession(token string) api.Response {
	session, err := cookies.GetSession(token)

	if err != nil {
		if err == cookies.ErrTokenExpired {
			return api.StatusResponse(http.StatusNoContent)
		}

		return api.InternalServerError(err)
	}

	err = session.Delete()
	if err != nil {
		return api.InternalServerError(err)
	}

	return api.StatusResponse(http.StatusNoContent)
}
