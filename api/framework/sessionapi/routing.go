package sessionapi

import (
	"errors"
	"gost/api"
	"gost/util/jsonutil"
)

// Errors generated by then Auth endpoint
var (
	ErrTokenNotSpecified = errors.New("The session token was not specified")
)

// RouteCreateSession performs data parsing and binding before calling the API
func RouteCreateSession(request *api.Request) api.Response {
	model := &LoginModel{}

	err := jsonutil.DeserializeJSON(request.Body, model)
	if err != nil {
		return api.BadRequest(err)
	}

	return createSession(model, request.ClientDetails)
}

// RouteGetAllSessions performs data parsing and binding before calling the API
func RouteGetAllSessions(request *api.Request) api.Response {
	var userID, err = request.GetIDRouteValue("userId")
	if err != nil {
		return api.BadRequest(err)
	}

	return getAllSessions(userID)
}

// RouteKillSession performs data parsing and binding before calling the API
func RouteKillSession(request *api.Request) api.Response {
	var token = request.GetStringRouteValue("token")
	if len(token) == 0 {
		return api.BadRequest(ErrTokenNotSpecified)
	}

	return killSession(token)
}
